# -*- coding: utf-8 -*-
"""V3_despliegue_modelo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10WVL5vLiRM12HKH0y0qHCdmUYUu10ttG
"""

import os
import cv2 as cv
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow import keras 
from tqdm.auto import tqdm
import datetime
from PIL import Image as im
import time

#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#Parámetros iniciales de entrada para la generacion de imágenes
clase_generar=[0, 1, 2]
num_elementos_generar=[3, 5, 7]

encoder_h5 = 'models/UAO_DL_encoder_model.h5'
generador_h5 = 'models/UAO_DL_generator_model_1479.h5'
model_encoder = keras.models.load_model(encoder_h5)
model_generador = keras.models.load_model(generador_h5)
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

train_path = 'train'
etiquetas = sorted(os.listdir(train_path))

train_images = []
train_labels = []
for categoria in etiquetas:
  print("Leyendo categoria", categoria)
  class_num = etiquetas.index(categoria)
  ruta = os.path.join(train_path, categoria)
  for img in tqdm(os.listdir(ruta)):
    img_array = cv.imread(os.path.join(ruta, img), cv.IMREAD_COLOR) 
    new_array = cv.resize(img_array, (64, 64), interpolation = cv.INTER_AREA) 
    train_images.append(new_array)
    train_labels.append(class_num)

x_train = np.array(train_images)
y_train = np.array(train_labels)
x_train = (x_train.astype('float32') - 127.5) / 127.5

#indices de las imágenes de adidas
index_adidas = np.where(y_train == 0)
#ïndices de las imágenes de converse
index_converse = np.where(y_train == 1)
#ïndices de las imágenes de nike
index_nike = np.where(y_train == 2)

for z in range(len(clase_generar)):
  #print(thislist[i])

  if (clase_generar[z] == 0):
    path_da_clase = 'data_aumentation/adidas/'
    index_generar = np.random.choice(index_adidas[0], size=num_elementos_generar[z])
  elif (clase_generar[z] == 1):
    path_da_clase = 'data_aumentation/converse/'
    index_generar = np.random.choice(index_converse[0], size=num_elementos_generar[z])
  elif (clase_generar[z] == 2):
    path_da_clase = 'data_aumentation/nike/'
    index_generar = np.random.choice(index_nike[0], size=num_elementos_generar[z])
  else:
      print("La clase de imágenes a generar es desconocida")

  encoder_input = []
  for i in index_generar:
    encoder_input.append(x_train[i])

  latent_vector = []
  for i in range(len(encoder_input)):
    lv = model_encoder.predict(encoder_input[i].reshape(1, encoder_input[i].shape[0], encoder_input[i].shape[1], encoder_input[i].shape[2]))
    latent_vector.append(lv)

  label = np.array([clase_generar[z]]).reshape((1,1))
  img_gen = []
  for i in range(len(latent_vector)):
    ig = model_generador.predict([latent_vector[i], label])
    img_gen.append(ig.reshape((64, 64, 3)))

  dim = (240, 240)
  img_resize = []
  for i in range(len(img_gen)):
    ir = cv.resize(img_gen[i], dim, interpolation = cv.INTER_LINEAR)
    img_resize.append(ir)

  for i in range(len(img_resize)):
    time_now = datetime.datetime.now()
    filename_gen = etiquetas[clase_generar[z]]+"_"+time_now.strftime("%Y-%m-%d_%H-%M-%S")+".png"
    path_data_aumentation = path_da_clase+filename_gen

    img_result = img_resize[i]*255

    cv.imwrite(path_data_aumentation, img_result)
    time.sleep(1)